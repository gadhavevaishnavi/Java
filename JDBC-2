//EmployeeDao
------------
package com.Dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.model.Employee;
import com.util.MyDatabase;

public class EmployeeDao {
	
//---------insertEmployee-----------
	
	public int insertEmployee(Employee e)
	{
		int result =0;
		
		String sql ="insert into Employee(name,designation,company,salary)values(?,?,?,?)";
		
		try (
			Connection con = MyDatabase.createConnection();
			PreparedStatement pst = con.prepareStatement(sql);)
		{
			pst.setString(1, e.getName());
			pst.setString(2, e.getDesignation());
			pst.setString(3, e.getCompany());
			pst.setDouble(4, e.getSalary());
			result = pst.executeUpdate();
			
		}catch(SQLException e1)
		{
		 e1.printStackTrace();
		}
			return result;
		}
	//-----------deletEmployeeById-----------
	
public int deletEmployeeById(int id)
{
	int result =0;
	String sql = "delete from employee where id=?";
	try (Connection con = MyDatabase.createConnection();
		PreparedStatement pst = con.prepareStatement(sql);){
		pst.setInt(1, id);
		result = pst.executeUpdate();
	}catch (SQLException e) {
		e.printStackTrace();
	}
	return result;
}
	
//-------------findEmployeeById-----------

public Employee findEmployeeById(int id)
{
	List<Employee> list = new ArrayList();
	//int result= 0;
	String sql= "select id,name,designation,company,salary from employee where id=?";
	 try(Connection con = MyDatabase.createConnection();
			 PreparedStatement pst = con.prepareStatement(sql);) {
		 pst.setInt(1, id);
		 
		ResultSet rs = pst.executeQuery();
		list.addAll (MyDatabase.employeeRowMapper(rs));
		
	} catch (SQLException e) {
	e.printStackTrace();
	}
	return (list.isEmpty()?null:list.get(0));
}

//--------findAllEmployee--------------
public List<Employee> findAllEmployee()
{
	List<Employee> list = new ArrayList();
	String sql = "select id ,name,designation,company,salary from employee";
	try (Connection con = MyDatabase.createConnection();
			PreparedStatement pst = con.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();){
		list.addAll(MyDatabase.employeeRowMapper(rs));
		
	} catch (SQLException e) {
		e.printStackTrace();
	}
	
return list;
}

//-----------updateEmployee-------------------
public int updateEmployee(Employee e) {
	int result =0;
	String sql1="Update Employee set name=?,designation=?,company=?,salary=? where id=?";
	try(Connection con=MyDatabase.createConnection();
			PreparedStatement pst=con.prepareStatement(sql1);) {
		pst.setString(1, e.getName());
		pst.setString(2, e.getDesignation());
		pst.setString(3, e.getCompany());
		pst.setDouble(4, e.getSalary());
		pst.setInt(5, e.getId());
		result=pst.executeUpdate();
	} catch (SQLException e3) {
		// TODO: handle exception
		e3.printStackTrace();
	}
	
	return result;
}

//----findEmployeeSalaryLessThan-------------
public List<Employee> findEmployeeSalaryLessThan(double salary) {
	List<Employee> list=new ArrayList();
	String sql3="select * from employee where salary<=?";
	try(Connection con=MyDatabase.createConnection();
			PreparedStatement pst=con.prepareStatement(sql3);
			) {
			pst.setDouble(1, salary);
			ResultSet rs=pst.executeQuery();
			list.addAll(MyDatabase.employeeRowMapper(rs));
	} catch (SQLException e2) {
	
		e2.printStackTrace();
	}
	return list;
}

//----------findEmployeeSalaryBetween-----------------
public List<Employee> findEmployeeSalaryBetween(double low,double high){
	List<Employee> list=new ArrayList();
	String sql="select * from employee where salary between ? and ?";
	try(Connection con=MyDatabase.createConnection();
		PreparedStatement pst=con.prepareStatement(sql);
			) {
		pst.setDouble(1, low);
		pst.setDouble(2, high);
		ResultSet rs=pst.executeQuery();
		list.addAll(MyDatabase.employeeRowMapper(rs));
	} catch (SQLException e) {
		
		e.printStackTrace();
	}
	return list;
}

//-----------findEmployeeBySalaryNotBetween------------
public List<Employee> findEmployeeBySalaryNotBetween(double low , double high) 
{
List<Employee> list = new ArrayList();
String sql = "select id,name,designation,company,salary from employee where salary between ? and ? ";
try (Connection con = MyDatabase.createConnection();
		PreparedStatement pst = con.prepareStatement(sql);){
	pst.setDouble(1, low);
	pst.setDouble(2, high);
	ResultSet rs = pst.executeQuery();
}catch(SQLException e) {
	e.printStackTrace();
}
return list;
}

//-----------findHighestSalary----------------
public double findHighestSalary()
{
 double salary =0;
 String sql = "select * from employee where salary =(select max(salary) as salary from employee)";
 try (Connection con = MyDatabase.createConnection();
		 PreparedStatement pst = con.prepareStatement(sql);
		 ResultSet rs = pst.executeQuery();)
 {
	 while(rs.next())
		 salary =rs.getDouble("salary");				
 }catch (SQLException e) {
	 e.printStackTrace();
}
  return salary;
}	

//--------findLowestSalary-------------
public double findLowestSalary()
{
 double salary =0;
 String sql = "select min(salary) as Minsalary from employee";
 try (Connection con = MyDatabase.createConnection();
		 PreparedStatement pst = con.prepareStatement(sql);
		 ResultSet rs = pst.executeQuery();)
 {
	 while(rs.next())
		 salary =rs.getDouble("Minsalary");				
 }catch (SQLException e) {
	 e.printStackTrace();
}
  return salary;
}	

//---------findAverageSalary---------
public double findAverageSalary()
{
 double salary =0;
 String sql = "select avg(salary) as avgsalary from employee";
 try (Connection con = MyDatabase.createConnection();
		 PreparedStatement pst = con.prepareStatement(sql);
		 ResultSet rs = pst.executeQuery();)
 {
	 while(rs.next())
		 salary =rs.getDouble("avgsalary");				
 }catch (SQLException e) {
	 e.printStackTrace();
}
  return salary;
}	

//by using sub query
// ----------findHighestSalaryEmployee----------------
public List<Employee> findHighestSalaryEmployee()
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) as salary from employee)";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();){
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//---------findSecondHighestSalaryEmployee--------
public List<Employee> findSecondHighestSalaryEmployee()
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) from employee where salary <(select max(salary) as salary from employee))";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();){
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//------findthirdHighestSalaryEmployee------------
public List<Employee> findthirdHighestSalaryEmployee()
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) from employee where salary < (select max(salary) from employee where salary <(select max(salary) as salary from employee)))";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();){
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//--------findHighestSalaryBelongsToCompany---------------
public List<Employee> findHighestSalaryBelongsToCompany()
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) as salary from employee where company ='CloudMinds') and company ='CloudMinds' ";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();){
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//---------findHighestSalaryBelongsToDesignation-------------
public List<Employee> findHighestSalaryBelongsToDesignation()
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) as salary from employee where designation ='Game Developer') and designation ='Game Developer' ";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();){
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//---------findHighestSalaryBelongsToCompanyUI---------
public List<Employee> findHighestSalaryBelongsToCompanyUI(String s)
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary =(select max(salary) as salary from employee where company =?) and company =?";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		){
	pst.setString(1, s);
	pst.setString(2, s);
	ResultSet rs = pst.executeQuery();
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}

//
public List<Employee> findSecondHighestSalaryBelongsToCompanyUI(String s)
{
List<Employee> list = new ArrayList();
String sql = "select * from employee where salary=(select max(salary) from employee where salary<(select max(salary)from employee where company=?) and company=?) and company=? ";
try (Connection con = MyDatabase.createConnection(); 
		PreparedStatement pst = con.prepareStatement(sql);
		){
	pst.setString(1, s);
	pst.setString(2, s);
	pst.setString(3, s);
	ResultSet rs = pst.executeQuery();
	list.addAll(MyDatabase.employeeRowMapper(rs));
}catch (SQLException e) {
	e.printStackTrace();
}
return list;
}
}
____________________________________________

//Employee
-----------
package com.model;

public class Employee {
	private int id;
	private String name;
	private String designation;
	private String Company;
	private double salary;  // Double = wrapper class
	
	
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", designation=" + designation + ", Company=" + Company
				+ ", salary=" + salary + "]";
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDesignation() {
		return designation;
	}
	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public String getCompany() {
		return Company;
	}
	public void setCompany(String company) {
		Company = company;
	}
	public Double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
}
________________________________________
//MyDatabase
package com.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.model.Employee;

public class MyDatabase {
	public static Connection createConnection()
	{
		Connection con = null;
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/jap76", "root", "Vaishu@283");
			
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		return con;
	}
public static List<Employee> employeeRowMapper(ResultSet rs) throws SQLException
{
	List<Employee> list = new ArrayList();
	while(rs.next())
	{
		Employee e = new Employee();
		e.setId(rs.getInt("id"));
		e.setName(rs.getString("name"));
		e.setDesignation(rs.getString("designation"));
		e.setCompany(rs.getString("company"));
		e.setSalary(rs.getDouble("salary"));
		list.add(e);
	}
	return list;
}
}
__________________________________________________

// App  (Main file)
package com.demo;

import java.util.List;

import com.Dao.EmployeeDao;
import com.model.Employee;

public class App 
{
    public static void main( String[] args )
    {
      EmployeeDao ed = new EmployeeDao();
    
      /*/*
      Employee e = new Employee();
      e.setName("Gangubai ramteke");
      e.setDesignation("UI Developer");
      e.setCompany("cts");
      e.setSalary(8000.0);
      System.out.println(ed.insertEmployee(e));
      */
      /*

      //to operate on huge data
      
      String[] companies = {
	            "Daikibo Industrials", "TechCorp", "Innovate Ltd", "Global Solutions", 
	            "NextGen Systems", "AlphaTech", "CyberDynamics", "Quantum Innovations", 
	            "BlueOcean Enterprises", "Skyline Technologies", "Vertex Solutions", 
	            "Fusion Systems", "Zenith Corp", "Pioneer Industries", "Summit Software", 
	            "Evergreen Tech", "NeuralSoft", "CloudMinds", "Infinity Technologies", 
	            "Stellar Enterprises", "OmniTech", "Hyperion Labs", "Nexus Systems",
	            "Astro Innovations", "Titan Software", "NovaTech", "Synergy Solutions",
	            "PrimeWave Technologies", "Velocity Corp", "Evolve Industries",
	            "EcoVision Ltd", "TurboSoft", "DataSphere", "Apex Technologies",
	            "Stratos Innovations", "CyberX Labs", "Quantum Nexus", "SmartGrid Solutions",
	            "Horizon Industries", "Orion Technologies", "Lambda Systems", "NeonTech",
	            "Polaris Enterprises", "CloudZen", "ByteForce", "Vortex Solutions",
	            "NeoWave Tech", "Solaris Innovations", "DeepMind Systems", "HyperSync",
	            "Catalyst Technologies", "Visionary Software", "Elevate Solutions",
	            "Omicron Dynamics", "Adaptive Systems", "Metrix Corp", "TerraSoft",
	            "Infinity AI", "Vanguard Enterprises", "SynerTech", "OmniData Corp",
	            "NeuraLogic", "Quantum Pulse", "CyberForge", "StrataTech", "OmegaSoft"
	        };
      String[] designations = {
	            "Software Engineer", "Senior Software Engineer", "Lead Developer", 
	            "Full Stack Developer", "Backend Developer", "Frontend Developer", 
	            "DevOps Engineer", "Cloud Engineer", "Data Engineer", "Machine Learning Engineer",
	            "AI Engineer", "Cybersecurity Analyst", "Security Engineer", "Penetration Tester",
	            "IT Security Specialist", "System Administrator", "Network Engineer",
	            "Database Administrator", "IT Support Specialist", "Help Desk Technician",
	            "Solutions Architect", "Technical Architect", "Software Architect",
	            "IT Project Manager", "Scrum Master", "Product Manager",
	            "Quality Assurance Engineer", "Test Automation Engineer", "SRE (Site Reliability Engineer)",
	            "Blockchain Developer", "Embedded Systems Engineer", "IoT Developer",
	            "Mobile App Developer", "Android Developer", "iOS Developer",
	            "Game Developer", "VR/AR Developer", "UI/UX Designer",
	            "Business Analyst", "Data Analyst", "Data Scientist",
	            "BI (Business Intelligence) Developer", "AI Researcher",
	            "Technical Support Engineer", "IT Consultant", "Chief Technology Officer (CTO)",
	            "Chief Information Officer (CIO)", "Cybersecurity Consultant", "Software Development Manager"
	        };
     
      Random r = new Random();  //give random values
      for(int i=1;i<=1000;i++) {
    /*	System.out.println(r.nextInt(20));
    System.out.println(companies[r.nextInt(companies.length)]);
    System.out.println(designations[r.nextInt(designations.length)]);   
    *//*
    	  Employee e = new Employee();
    	  e.setCompany(companies[r.nextInt(companies.length)]);
    	  e.setDesignation(designations[r.nextInt(designations.length)]);
    	  e.setSalary(r.nextInt(125)*10000.0);
    	  StringBuilder sb = new StringBuilder();
    	  for (int j=1;j<=15;j++)
    	  
    		  sb.append((char)(r.nextInt(26)+65));
    	  e.setName(sb.toString()); 
    	  System.out.println(ed.insertEmployee(e));
    	  
    //-------deletEmployeeById----------
     /*
      int check=  ed.deletEmployeeById(26);
     System.out.println(check);
    
      //-------findEmployeeById--------
      
     Employee e = ed.findEmployeeById(22);
     System.out.println(e);   //Employee [id=22, name=NVTWSLFGCNGXFDD, designation=VR/AR Developer, Company=Solaris Innovations, salary=490000.0]
 
      //---------findAllEmployee--------------
      List<Employee> list = ed.findAllEmployee();
      for(Employee e : list)
    	  System.out.println(e);
    //------------updateEmployee-------------
   
      Employee e = ed.findEmployeeById(2);
      e.setName("Komal");
      e.setDesignation("Tester");
      e.setCompany("Google");
      e.setSalary(400000);
      System.out.println(ed.updateEmployee(e));
      
      //-------findEmployeeSalaryLessThan----------
      List<Employee> list=ed.findEmployeeSalaryLessThan(40000);
      for(Employee e:list)
      	System.out.println(e);
      	/*
      //-------findEmployeeSalaryBetween--------------
      List<Employee> list=ed.findEmployeeSalaryBetween(1000,30000);
      for(Employee e1:list)
      	System.out.println(e1);
      	
      //---------findHighestSalary--------
      double salary = ed.findHighestSalary();
      System.out.println(salary);
    
      //------findLowestSalary-----------
      double salary = ed.findLowestSalary();
      System.out.println(salary);
     
      //--------findAverageSalary--------------
      
      double salary = ed.findAverageSalary();
      System.out.println(salary);
      
       
     
      //---------findHighestSalaryEmployee----------
      List<Employee> list = ed.findHighestSalaryEmployee();
      for(Employee e : list)
    	  System.out.println(e); //Employee [id=947, name=DDWXNSWCGEGAIBM, designation=Penetration Tester, Company=NextGen Systems, salary=1240000.0]
   
      
      //----------findSecondHighestSalaryEmployee----------
      List<Employee> list = ed.findSecondHighestSalaryEmployee();
      for(Employee e : list)
    	  System.out.println(e);  //Employee [id=946, name=ERZUTJAQZHEUMXT, designation=Game Developer, Company=Titan Software, salary=1230000.0]
   
      //---------findthirdHighestSalaryEmployee-------------
      List<Employee> list = ed.findthirdHighestSalaryEmployee();
      for(Employee e : list)
    	  System.out.println(e); 
      
      //----------findHighestSalaryBelongsToCompany---------------
      List<Employee> list = ed.findHighestSalaryBelongsToCompany();
      for(Employee e : list)
    	  System.out.println(e);   //Employee [id=281, name=RIOSMEJENZVXQGY, designation=UI/UX Designer, Company=CloudMinds, salary=1220000.0]
  
      //--------findHighestSalaryBelongsToDesignation-----------
      List<Employee> list = ed.findHighestSalaryBelongsToDesignation();
      for(Employee e : list)
    	  System.out.println(e);   //Employee [id=946, name=ERZUTJAQZHEUMXT, designation=Game Developer, Company=Titan Software, salary=1230000.0]

     
      //-------findHighestSalaryBelongsToDesignation----------
      List<Employee> list = ed.findHighestSalaryBelongsToCompanyUI("Velocity Corp");
      for(Employee e : list)
    	  System.out.println(e);  //Employee [id=528, name=FLECEZQXTJQVLOD, designation=AI Researcher, Company=Velocity Corp, salary=1240000.0]

     */
      //---------findSecondHighestSalaryBelongsToCompanyUI-------------
      	List<Employee> list = ed.findSecondHighestSalaryBelongsToCompanyUI("Quantum Nexus");
      	 for(Employee e : list)
      		 System.out.println(e);   //Employee [id=982, name=FLHPBRQPDPIWNQY, designation=Software Engineer, Company=Quantum Nexus, salary=1140000.0]

     }
   }












